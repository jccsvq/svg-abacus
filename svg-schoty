#!/usr/bin/env -S python3 

import argparse, sys

DESC = '''Draws diagrams for Russian and Danish abacuses by reading row values 
from stdin.'''
EPIL = "jccsvq fecit, 2025. Public domain."

beadictr = {
    "0": "00001111221111",
    "1": "10000111221111",
    "2": "11000011221111",
    "3": "11100001221111",
    "4": "11110000221111",
    "5": "11112000021111",
    "6": "11112200001111",
    "7": "11112210000111",
    "8": "11112211000011",
    "9": "11112211100001",
    "10": "11112211110000",
    "q0": "00000000001221",
    "q1": "10000000000221",
    "q2": "12000000000021",
    "q3": "12200000000001",
    "q4": "12210000000000",
    "m0": "00000000334433",
    "m1": "30000000034433",
    "m2": "33000000004433",
    "m3": "33400000000433",
    "m4": "33440000000033",
    "m5": "33443000000003",
    "m6": "33443300000000"}

beadictd = {
    "0": "11111222220000",
    "1": "11111222200002",
    "2": "11111222000022",
    "3": "11111220000222",
    "4": "11111200002222",
    "5": "11111000022222",
    "6": "11110000122222",
    "7": "11100001122222",
    "8": "11000011122222",
    "9": "10000111122222",
    "10": "00001111122222"}

def prtsvgheader(x, y, width, height, vBoxx,vBoxy):
    """Creates the SVG header, viewport, viewbox and <defs>"""
    print('<svg  xmlns="http://www.w3.org/2000/svg"', file=ff)
    line = f'x="{x}px" y="{y}px"'
    print(line, file=ff)
    line = f'width="{width}px" height="{height}px"'
    print(line, file=ff)   
    line = f'viewBox="0 0 {vBoxx} {vBoxy}">'
    print(line, file=ff)
    print(f'''<style>
.names {{;
font: bold 80px mono;
fill: Gold;
}}
</style>
<defs>
<radialGradient id="grad1" cx="50%" cy="50%" r="50%" fx="30%" fy="40%">
    <stop offset="0%" stop-color="antiquewhite" />
    <stop offset="50%" stop-color="{args.b1color}" />
</radialGradient>
<radialGradient id="grad2" cx="50%" cy="50%" r="50%" fx="30%" fy="40%">
    <stop offset="0%" stop-color="antiquewhite" />
    <stop offset="50%" stop-color="{args.b2color}" />
</radialGradient>
<radialGradient id="grad3" cx="50%" cy="50%" r="50%" fx="30%" fy="40%">
    <stop offset="0%" stop-color="antiquewhite" />
    <stop offset="50%" stop-color="{args.b3color}" />
</radialGradient>
<radialGradient id="grad4" cx="50%" cy="50%" r="50%" fx="30%" fy="40%">
    <stop offset="0%" stop-color="antiquewhite" />
    <stop offset="50%" stop-color="{args.b4color}" />
</radialGradient>
<linearGradient id="rod" gradientTransform="rotate(90)">
    <stop offset="5%" stop-color="LightGrey" />
    <stop offset="65%" stop-color="Black" />
</linearGradient>
<linearGradient id="framegrad">
    <stop offset="5%" stop-color="BurlyWood" />
    <stop offset="95%" stop-color="#3f1010" />
</linearGradient>
<linearGradient id="framegrad2" gradientTransform="rotate(90)">
    <stop offset="5%" stop-color="BurlyWood" />
    <stop offset="95%" stop-color="#3f1010" />
</linearGradient>
<g id="bead">
	<ellipse cy="100" cx="50" ry="90" rx="50" fill="url(#grad1)" stroke="#F2F2F2"/>
</g>
<g id="bead2">
	<ellipse cy="100" cx="50" ry="90" rx="50" fill="url(#grad2)" stroke="#F2F2F2"/>
</g>
<g id="bead3">
	<ellipse cy="100" cx="50" ry="90" rx="50" fill="url(#grad3)" stroke="#F2F2F2"/>
</g>
<g id="bead4">
	<ellipse cy="100" cx="50" ry="90" rx="50" fill="url(#grad4)" stroke="#F2F2F2"/>
</g>
<g id="frame">
    <rect y="0" fill="url(#framegrad)" width="100" height="200" stroke="url(#framegrad)"/> 
</g>
</defs>''', file=ff)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description=DESC,
        epilog=EPIL,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-d', '--danish',
        help='Use Danish/school abacus',
        action='store_true',
        default=False)
    parser.add_argument('-s', '--scale',
        help='Nominal rod width in pixels',
        default=100)
    parser.add_argument('-v', '--values',
        help='String of column values separated by spaces. If not used, data \
        is read from stdin',
        default=None)
    parser.add_argument('-b', '--background',
        help='Non-transparent background',
        action='store_true',
        default=False)
    parser.add_argument('--bgcolor',
        help='Non-transparent background color',
        default='Ivory')
    parser.add_argument('--b1color',
        help='Bead 1 color',
        default='DarkGreen')
    parser.add_argument('--b2color',
        help='Bead 2 color',
        default='DarkRed')
    parser.add_argument('--b3color',
        help='Bead 3 color',
        default='DarkBlue')
    parser.add_argument('--b4color',
        help='Bead 4 color',
        default='Black')
    parser.add_argument('-n', '--names',
        help='Add column names/labels A, B, C, ...',
        action='store_true',
        default=False)
    parser.add_argument('-k', '--keys',
        help='Labels columns with codes',
        action='store_true',
        default=False)
    parser.add_argument('-o', '--output',
        help='Output filename',
        default=None)

    args = parser.parse_args()

    if args.output is None:
        ff = sys.stdout
    else:
        ff = open(args.output, 'w')

    if args.danish :
        beadict = beadictd
    else:
        beadict = beadictr

    if args.values is None:
        datos = input().split()
    else:
        datos = args.values.split()
    if args.names :
        labels = "A B C D E F G H I J K L M N O P Q R S T U V X Y Z".split()

    nrods = len(datos)
    scale = int(args.scale)/100
    vBoxx = 1600
    vBoxy = (nrods+1)*200
    width = scale*vBoxx/2
    height = scale*vBoxy/2

    prtsvgheader(0,0, width, height, vBoxx, vBoxy)

    if args.background :
        line = f'''<rect width="{vBoxx}" height="{vBoxy}" 
        x="0" y="0" fill="{args.bgcolor}"/>'''
        print(line, file=ff)

    # Frame
    print(f'<rect y="0" x="0" fill="url(#framegrad2)" \
    width="1600" height="100"/>', file=ff)
    line = f'<polygon fill="url(#framegrad)" points="0,0 0,100 100,100"/>'
    print(line, file=ff)
    line = f'<polygon fill="url(#framegrad)" points="{vBoxx-100},100 {vBoxx},0\
     {vBoxx},100"/>'
    print(line, file=ff)
    print('<line x1="0" y1="0" x2="100" y2="100" stroke="black" \
    stroke-width="4"/>', file=ff)
    print('<line x1="1600" y1="0" x2="1500" y2="100" stroke="black" \
    stroke-width="4"/>', file=ff)

    print(f'<rect y="{vBoxy-100}" x="0" fill="url(#framegrad2)" \
    width="1600" height="100"/>', file=ff)
    line = f'<polygon fill="url(#framegrad)" points="0,{vBoxy} \
    100,{vBoxy-100} 0,{vBoxy-100}"/>'
    print(line, file=ff)
    line = f'<polygon fill="url(#framegrad)" points="{vBoxx-100},{vBoxy-100} \
    {vBoxx},{vBoxy-100} {vBoxx},{vBoxy}"/>'
    print(line, file=ff)
    print(f'<line x1="0" y1="{vBoxy}" x2="100" y2="{vBoxy-100}" stroke="black" \
    stroke-width="4"/>', file=ff)
    print(f'<line x1="{vBoxx}" y1="{vBoxy}" x2="{vBoxx-100}" y2="{vBoxy-100}" \
    stroke="black" stroke-width="4"/>', file=ff)  

    # Rods
    for i in range(nrods) :
        print(f'<rect y="{200*i+188}" x="0" fill="url(#rod)" width="1500" \
        height="24"/>', file=ff)
        print(f'<use href="#frame" x="0" y="{200*i+100}"/>', file=ff)
        print(f'<use href="#frame" x="1500" y="{200*i+100}"/>', file=ff)
        cosa = beadict[datos[i]]
        for j in range(len(cosa)):
            if cosa[j] == "1":
                print(f'<use href="#bead" x="{100*(j+1)}" y="{200*i+100}"/>', file=ff)
            if cosa[j] == "2":
                print(f'<use href="#bead2" x="{100*(j+1)}" y="{200*i+100}"/>', file=ff)
            if cosa[j] == "3":
                print(f'<use href="#bead3" x="{100*(j+1)}" y="{200*i+100}"/>', file=ff)
            if cosa[j] == "4":
                print(f'<use href="#bead4" x="{100*(j+1)}" y="{200*i+100}"/>', file=ff)
        # Labels
        if args.names :
            line = f'<text x="20" y="{230+200*i}" \
            class="names">{labels[i]}</text>'
            print(line, file=ff)
    if args.keys :
        print('<!-- Column values -->', file=ff)
        for i in range(nrods) :
            if len(datos[i]) == 2 :
                x = vBoxx - 96
            else:
                x = vBoxx - 73
            line = f'<text x="{x}" y="{200*i+220}" \
            class="names">{datos[i]}</text>'
            print(line, file=ff)

    print('</svg>', file=ff)

    if args.output is not None :
        ff.close()
